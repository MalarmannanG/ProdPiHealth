{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 The Hello World Project\par
In this lesson, you're going to learn about the different parts of a very simple program that displays the message, "Hello World!" You'll also learn what happens when you build and run the application, and you'll learn about some common errors you may encounter and how to correct them.\par
\par
A C# program begins with a Main method, usually found in a file called Program.cs, like this one:\par
\par
using System;\par
\par
namespace ConsoleApplication\par
\{\par
    public class Program\par
    \{\par
        public static void Main()\par
        \{\par
            Console.WriteLine("Hello World!");\par
        \}\par
    \}\par
\}\par
using System;\par
\par
namespace ConsoleApplication\par
\{\par
    public class Program\par
    \{\par
        public static void Main()\par
        \{\par
            Console.WriteLine("Hello World!");\par
        \}\par
    \}\par
\}\par
Tip \{.tip .newLanguage \}\par
A method is a named group of individual commands the program will run. You'll learn more about creating methods in a bit.\par
\par
Program.cs\par
Program.cs is a (usually small) text file. Its file extension is "cs" because it contains C# source code. When you build the program from a command prompt, the dotnet build tool will build all of the files that end in ".cs" using the C# compiler. Although it's a small program, there are a number of important bits of syntax in it that you should understand. First, remember that C# is case-sensitive, so keywords won't work unless they're lowercase, and other named elements within the source code must exactly match the case of the element being referenced.\par
\par
The first line of the program is\par
\par
using System;\par
The using statement is a programmer convenience. It allows us to refer to elements that exist within the listed namespace (in this case, System) without prefixing them with the namespace name. What's a namespace? A namespace is a way of organizing programming constructs. They're similar to folders or directories in your file system. You don't have to use them, but they make it much easier to find and organize things. The reason this program includes the System namespace is that the Console type (used to print "Hello World!") is in that namespace. If the using statement were removed, the Console.WriteLine statement would need to include the namespace, becoming System.Console.WriteLine. using statements must end with a semicolon (;). In C#, most statements that aren't defining a scope end with a semicolon.\par
\par
After the using statements, the code declares its namespace:\par
\par
namespace ConsoleApplication\par
Again, it's a good idea to use namespaces to keep larger codebases organized. namespace is a language keyword; ConsoleApplication is an identifier. In this case, the ConsoleApplication namespace has only one element in it (the Program class), but this would grow as the program grew in complexity. Namespaces use curly braces (\{ and \}) to denote which types belong within the namespace. Namespaces are optional; you'll frequently see they're omitted from the small samples shown in this tutorial.\par
\par
Inside the namespace's scope (defined by its curly braces), a class called "Program" is created:\par
\par
public class Program\par
This line includes two keywords and one identifier. The public keyword describes the class's accessibility level. This defines how the class may be accessed by other parts of the program, and public means there are no restrictions to its access. The class keyword is used to define classes in C#, one of the primary constructs used to define types you will work with. C# is a strongly typed language, meaning that most of the time you'll need to explicitly define a type in your source code before it can be referenced from a program.\par
\par
Inside the class's scope, a method called "Main" is defined:\par
\par
public static void Main()\par
The "Main" method is this program's entry point - the first code that runs when the application is run. Like classes, methods can have accessibility modifiers, too. In this case, public means there are no limitations on access to this method.\par
\par
Next, the static keyword marks this method as global and associated with the type it's defined on, not a particular instance of that type. You'll learn more about this distinction in later lessons.\par
\par
The void keyword indicates that this method doesn't return a value. The method is named Main.\par
\par
Finally, inside of parentheses (( and )), the method defines any parameters it requires. In this case, the method has no parameters, but a command line program might accept arguments by specifying a parameter of type string array. This parameter is typically defined as string[] args, where args in this case is short for arguments. Arguments correspond to parameters. A method defines the parameters it requires; when calling a method, the values passed to its parameters are referred to as arguments. Like namespaces and classes, methods have scope defined by curly braces.\par
\par
A class can contain many methods, which are one kind of member of that class.\par
\par
Within the method's scope, there is one line:\par
\par
Console.WriteLine("Hello World!");\par
You've already learned that Console is a type inside of the System namespace. It's worth noting that this code does not create an instance of the Console type - it is simply calling the WriteLine method on the type directly. This tells you that WriteLine, like the Main method in this program, is declared as a static method. This means that any part of the application that calls this method will be calling the same method, doing the same thing. The program won't, for instance, open several different console windows and write to them separately. Every call to Console.WriteLine is going to write to the same console window.\par
\par
Inside of the parentheses, the program is passing in "Hello World!" to the method. This is an argument, and will be used by the WriteLine method internally. C# defines a number of built-in types, one of which is a string. A string is a series of text characters. In this case, the program is passing the string "Hello World!" as an argument to the WriteLine method, which has defined a string parameter type. At the end of the line, the statement ends with a semicolon.\par
\par
After the Console.WriteLine statement, there are three closing curly braces (\}). These close the scopes for the Main method, the Program class, and the ConsoleApplication namespace, respectively. Note that the program uses indentation to make it easy to see which elements of the code belong to which scope. This is a good practice to follow, and will make it much easier for you (or others) to quickly read and understand the code you write.\par
\par
Adding Variables\par
In this lesson, you'll create a simple Hello World program, and then you'll learn how you can customize the behavior of the program by adding variables to it.\par
\par
This simple program just prints "Hello World!" to the console:\par
\par
Console.WriteLine("Hello World!");\par
using System;\par
\par
class Program\par
\{\par
    static void Main()\par
    \{\par
        Console.WriteLine("Hello World!");\par
    \}\par
\}\par
Tip \{.tip .newLanguage \}\par
It's programming tradition that the first program one writes in a new language print out the phrase, "Hello World".\par
\par
You can change this greeting to be more personalized by using a variable. On the line above this one, you can add a variable that holds your name, like this:\par
\par
var name = "Steve"; // use your name here\par
There are a few new elements to this line of code. First, you're using a C# keyword, var, which you can think of as variable. The var keyword is shorthand for whatever the type on the other side of the assignment operator (=) might be. In this case, the value in double quotes ("Steve" in the example above) is a string. Strings are one of the built-in types in C#, and are used to represent text values. You can also declare a variable by specifying its type explicitly. In this example, the equivalent statement would be string name = "Steve";.\par
\par
Tip \{.tip .javascript\}\par
Although Javascript also uses var for variable declaration, don't let that confuse you. The C# var is strongly typed, meaning that unlike Javascript's dynamic type system, the variable being declared will be of a specific type, just as if that type's name had been used to declare it.\par
\par
The // on the line represents a single-line comment. Everything on the line that follows these two characters is ignored by the compiler. You can use these comments on a line all by themselves, or following other code as in this case. Comments are useful for explaining why you're doing something a certain way in your application, but avoid the temptation to overuse them or to use them to explain complicated code. A better solution is to make the code less complicated.\par
\par
Now that you have a variable representing your name, you can use it in the next line so that the program greets you, rather than the world. To do that, remove the word World and replace it with \{name\}. Note that these are curly braces around the name of the variable. By using this convention, you're letting C# know that you want it to substitute the value of the variable name in that location. The last thing you need to do for this convention to work is prefix the string with a $ sign. When completed, the two lines of code should look like this:\par
\par
var name = "Steve"; // use your name here\par
Console.WriteLine($"Hello \{name\}!");\par
using System;\par
\par
class Program\par
\{\par
    static void Main()\par
    \{\par
        var name = "Steve"; // use your name here\par
        Console.WriteLine($"Hello \{name\}!");\par
    \}\par
\}\par
Run the program.\par
\par
Tip \{.tip .CLI\}\par
From a command prompt in the project folder, you can run the program by typing dotnet run.\par
\par
Tip \{.tip .visualstudio\}\par
Within Visual Studio, ctrl+F5 will run the console application, launching a new console window.\par
\par
You should see the output that includes your name (or "Steve" if you decided to just use the code above).\par
}
 